name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main
  # schedule:
  #   - cron: '0 3 * * *'

  repository_dispatch:
    types: [trigger-workflow]

permissions: write-all
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  HASH_FILE: build_hash
  IMAGE_NAME: shiroi
  IMAGE_TAG: latest
  KEEP_IMAGE_VERSIONS: 3 # Number of image versions to keep for rollback

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    if: ${{ github.event.head_commit.message != 'Update hash file' }}

    outputs:
      hash_content: ${{ steps.read_hash.outputs.hash_content }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read HASH_FILE content
        id: read_hash
        run: |
          content=$(cat ${{ env.HASH_FILE }}) || true
          echo "hash_content=$content" >> "$GITHUB_OUTPUT"

  check:
    name: Check Should Rebuild
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      canceled: ${{ steps.use_content.outputs.canceled }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: innei-dev/shiroi
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
          fetch-depth: 0
          lfs: true

      - name: Use content from prev job and compare
        id: use_content
        env:
          FILE_HASH: ${{ needs.prepare.outputs.hash_content }}
        run: |
          file_hash=$FILE_HASH
          current_hash=$(git rev-parse --short HEAD)
          echo "File Hash: $file_hash"
          echo "Current Git Hash: $current_hash"
          if [ "$file_hash" == "$current_hash" ]; then
            echo "Hashes match. Stopping workflow."
            echo "canceled=true" >> $GITHUB_OUTPUT
          else
            echo "Hashes do not match. Continuing workflow."
          fi

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: check
    if: ${{needs.check.outputs.canceled != 'true'}}

    outputs:
      sha_short: ${{ steps.store.outputs.sha_short }}
      branch: ${{ steps.store.outputs.branch }}
      date_tag: ${{ steps.store.outputs.date_tag }}
      image_file: ${{ steps.store.outputs.image_file }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: innei-dev/shiroi
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
          fetch-depth: 1
          lfs: true

      - name: Checkout LFS objects
        run: git lfs checkout

      - name: Store artifact commit version
        shell: bash
        id: store
        run: |
          sha_short=$(git rev-parse --short HEAD)
          branch_name=$(git rev-parse --abbrev-ref HEAD)
          date_tag=$(date -u +"%Y%m%d_%H%M")
          image_file="${{ env.IMAGE_NAME }}-${sha_short}.tar"
          echo "sha_short=$sha_short" >> "$GITHUB_OUTPUT"
          echo "branch=$branch_name" >> "$GITHUB_OUTPUT"
          echo "date_tag=$date_tag" >> "$GITHUB_OUTPUT"
          echo "image_file=$image_file" >> "$GITHUB_OUTPUT"
          echo "Generated tags: $sha_short, $date_tag"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:${{ steps.store.outputs.sha_short }}
            ${{ env.IMAGE_NAME }}:${{ steps.store.outputs.date_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{ steps.store.outputs.image_file }}

      - name: Cache Docker image
        uses: actions/cache/save@v4
        with:
          path: /tmp/${{ steps.store.outputs.image_file }}
          key: docker-image-${{ github.run_number }}-${{ steps.store.outputs.sha_short }}

  deploy:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout deployment repository
        uses: actions/checkout@v4

      - name: Restore Docker image from cache
        uses: actions/cache/restore@v4
        with:
          path: /tmp/${{ needs.build.outputs.image_file }}
          key: docker-image-${{ github.run_number }}-${{ needs.build.outputs.sha_short }}
          fail-on-cache-miss: true

      - name: List downloaded files
        run: |
          ls -la /tmp
          echo "Looking for image file: /tmp/${{ needs.build.outputs.image_file }}"

      - name: Copy Docker image and compose files via rsync
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Ensure target directory exists
            mkdir -p /tmp/shiroi
            mkdir -p $HOME/shiroi/deploy

      - name: Transfer Docker image and deployment files
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.PORT || 22 }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts

          # Transfer Docker image
          TRANSFER_CMD="rsync -avz -e 'ssh -i ~/.ssh/id_rsa -p ${{ secrets.PORT || 22 }}' /tmp/${{ needs.build.outputs.image_file }} ${{ secrets.USER }}@${{ secrets.HOST }}:/tmp/shiroi/"
          echo "Transferring Docker image..."
          eval $TRANSFER_CMD

          # Transfer compose files and configs
          COMPOSE_CMD="rsync -avz -e 'ssh -i ~/.ssh/id_rsa -p ${{ secrets.PORT || 22 }}' docker-compose.yml nginx/ deploy-zero-downtime.sh sync-configs.sh shiroi.env.example compose.env.example ${{ secrets.USER }}@${{ secrets.HOST }}:$HOME/shiroi/deploy/"
          echo "Transferring deployment files..."
          eval $COMPOSE_CMD

          if [ $? -eq 0 ]; then
            echo "File transfer completed successfully"
          else
            echo "File transfer failed"
            exit 1
          fi

      - name: Deploy Docker container with zero downtime
        uses: appleboy/ssh-action@master
        with:
          command_timeout: 15m
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            set -e

            # 定义变量
            IMAGE_FILE="${{ needs.build.outputs.image_file }}"
            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            SHA_SHORT="${{ needs.build.outputs.sha_short }}"
            DATE_TAG="${{ needs.build.outputs.date_tag }}"
            NEW_IMAGE="$IMAGE_NAME:$SHA_SHORT"

            echo "Starting zero-downtime deployment..."
            echo "Image: $NEW_IMAGE"
            echo "Available tags: latest, $SHA_SHORT, $DATE_TAG"
            echo "Current user: $(whoami)"
            echo "Docker version: $(docker --version)"

            # 确保目录存在
            mkdir -p /tmp/shiroi
            cd $HOME/shiroi/deploy

            # 加载新的 Docker 镜像
            cd /tmp/shiroi
            if [ ! -f "$IMAGE_FILE" ]; then
              echo "Error: Docker image file $IMAGE_FILE not found"
              ls -la /tmp/shiroi/
              exit 1
            fi

            echo "Loading Docker image..."
            docker load -i $IMAGE_FILE

            # 验证镜像标签
            echo "Verifying loaded image tags..."
            docker images $IMAGE_NAME --format "table {{.Tag}}\t{{.CreatedAt}}" | grep -E "(latest|$SHA_SHORT|$DATE_TAG)"

            # 切换到部署目录
            cd $HOME/shiroi/deploy

            # 同步配置文件
            echo "Synchronizing configuration files..."
            ./sync-configs.sh

            # 检查是否是首次部署
            if ! docker compose ps nginx | grep -q "Up"; then
              echo "First time deployment - starting all services..."
              export SHIROI_IMAGE=$NEW_IMAGE
              docker compose up -d
              
              # 等待服务启动
              sleep 30
              
              # 验证服务状态
              if docker compose ps | grep -q "unhealthy"; then
                echo "Some services are unhealthy!"
                docker compose ps
                docker compose logs
                exit 1
              fi
              
              echo "Initial deployment completed successfully"
            else
              echo "Performing zero-downtime deployment..."
              ./deploy-zero-downtime.sh deploy $NEW_IMAGE
            fi

            # 清理临时文件
            rm -f /tmp/shiroi/$IMAGE_FILE

            # 清理旧镜像（保留指定数量的版本用于回滚）
            # 这确保了 rollback.sh 和 deploy-zero-downtime.sh 可以访问足够的历史版本
            KEEP_VERSIONS=${{ env.KEEP_IMAGE_VERSIONS }}
            echo "Cleaning up old images (keeping latest $KEEP_VERSIONS versions for rollback)..."
            echo "Current tags preserved: latest, $SHA_SHORT, $DATE_TAG"

            # 获取所有标签，排除系统标签和当前构建的标签
            ALL_TAGS=$(docker images $IMAGE_NAME --format "{{.Tag}}" | grep -v "TAG" | grep -v "latest" | grep -v "$SHA_SHORT" | grep -v "$DATE_TAG" | grep -v "<none>")

            # 按时间排序，获取需要删除的旧版本（保留最新的 KEEP_VERSIONS 个版本）
            if [ ! -z "$ALL_TAGS" ]; then
              # 使用 git commit hash 格式的标签进行版本管理（7 个字符的 hash）
              HASH_TAGS=$(echo "$ALL_TAGS" | grep -E '^[a-f0-9]{7}$' | sort -r)
              DATE_TAGS=$(echo "$ALL_TAGS" | grep -E '^[0-9]{8}_[0-9]{4}$' | sort -r)
              
              # 清理旧的 hash 标签
              OLD_HASH_TAGS=$(echo "$HASH_TAGS" | tail -n +$((KEEP_VERSIONS + 1)))
              # 清理旧的日期标签  
              OLD_DATE_TAGS=$(echo "$DATE_TAGS" | tail -n +$((KEEP_VERSIONS + 1)))
              
              OLD_TAGS="$OLD_HASH_TAGS $OLD_DATE_TAGS"
              OLD_TAGS=$(echo "$OLD_TAGS" | tr ' ' '\n' | grep -v '^$' | sort -u)
              
              if [ ! -z "$OLD_TAGS" ]; then
                echo "Removing old image tags: $OLD_TAGS"
                echo "$OLD_TAGS" | xargs -r -I {} docker rmi ${IMAGE_NAME}:{} || true
                echo "Image cleanup completed"
              else
                echo "No old images to clean up (keeping latest $KEEP_VERSIONS versions for rollback)"
              fi
            else
              echo "No tagged images found to clean up"
            fi

            # 显示保留的镜像版本
            echo "Retained image versions for rollback:"
            docker images $IMAGE_NAME --format "table {{.Tag}}\t{{.CreatedAt}}" | grep -E "(latest|^[a-f0-9]{7}$|^[0-9]{8}_[0-9]{4}$)" | head -$((KEEP_VERSIONS * 2 + 1))


            # 最终状态检查
            echo "Deployment status:"
            docker compose ps

            echo "Testing service availability..."
            sleep 5
            if curl -f http://localhost:12333/nginx-health > /dev/null 2>&1; then
              echo "Service is available on port 12333"
            else
              echo "Warning: Service health check on port 12333 failed"
            fi

            echo "Zero-downtime deployment completed successfully"

      - name: After deploy script
        run: |
          hash=${{ needs.build.outputs.sha_short }}
          # curl -X "POST" "https://mx.innei.in/api/v2/fn/shiro/new-version-hook" -H 'Content-Type: application/json' -d "{\"hash\": \"$hash\", \"key\": \"\"}"
          ${{ secrets.AFTER_DEPLOY_SCRIPT }}

  store:
    name: Store artifact commit version
    runs-on: ubuntu-latest
    needs: [deploy, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      # Get the commit version from the build job
      - name: Use outputs from build
        env:
          SHA_SHORT: ${{ needs.build.outputs.sha_short }}
          BRANCH: ${{ needs.build.outputs.branch }}
        run: |
          echo "SHA Short from build: $SHA_SHORT"
          echo "Branch from build: $BRANCH"

      - name: Write hash to file
        env:
          SHA_SHORT: ${{ needs.build.outputs.sha_short }}
        run: echo $SHA_SHORT > ${{ env.HASH_FILE }}

      - name: Commit files
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add ${{ env.HASH_FILE }}
          git commit -a -m "Update hash file"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
